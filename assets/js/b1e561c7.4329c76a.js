"use strict";(self.webpackChunkmindkey=self.webpackChunkmindkey||[]).push([[6756],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},82096:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={id:"scalars",title:"Scalars",slug:"scalars",sidebar_position:9},l=void 0,s={unversionedId:"Graphql-Test/scalars",id:"Graphql-Test/scalars",title:"Scalars",description:"Boolean",source:"@site/docs/Graphql-Test/scalars.md",sourceDirName:"Graphql-Test",slug:"/Graphql-Test/scalars",permalink:"/docs/Graphql-Test/scalars",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Graphql-Test/scalars.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{id:"scalars",title:"Scalars",slug:"scalars",sidebar_position:9},sidebar:"docs",previous:{title:"Input objects",permalink:"/docs/Graphql-Test/inputObjects"},next:{title:"Swapi",permalink:"/docs/Graphql-Test/swapis"}},o={},p=[{value:"Boolean",id:"boolean",level:2},{value:"Date",id:"date",level:2},{value:"DateTime",id:"datetime",level:2},{value:"Float",id:"float",level:2},{value:"GitObjectID",id:"gitobjectid",level:2},{value:"GitRefname",id:"gitrefname",level:2},{value:"GitSSHRemote",id:"gitsshremote",level:2},{value:"GitTimestamp",id:"gittimestamp",level:2},{value:"HTML",id:"html",level:2},{value:"ID",id:"id",level:2},{value:"Int",id:"int",level:2},{value:"PreciseDateTime",id:"precisedatetime",level:2},{value:"String",id:"string",level:2},{value:"URI",id:"uri",level:2},{value:"X509Certificate",id:"x509certificate",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"boolean"},"Boolean"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Boolean")," scalar type represents ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h2",{id:"date"},"Date"),(0,a.kt)("p",null,"An ISO-8601 encoded date string."),(0,a.kt)("h2",{id:"datetime"},"DateTime"),(0,a.kt)("p",null,"An ISO-8601 encoded UTC date string."),(0,a.kt)("h2",{id:"float"},"Float"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Float")," scalar type represents signed double-precision fractional values as specified by ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/IEEE_floating_point"},"IEEE 754"),"."),(0,a.kt)("h2",{id:"gitobjectid"},"GitObjectID"),(0,a.kt)("p",null,"A Git object ID."),(0,a.kt)("h2",{id:"gitrefname"},"GitRefname"),(0,a.kt)("p",null,"A fully qualified reference name (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"refs/heads/master"),")."),(0,a.kt)("h2",{id:"gitsshremote"},"GitSSHRemote"),(0,a.kt)("p",null,"Git SSH string"),(0,a.kt)("h2",{id:"gittimestamp"},"GitTimestamp"),(0,a.kt)("p",null,"An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC."),(0,a.kt)("h2",{id:"html"},"HTML"),(0,a.kt)("p",null,"A string containing HTML code."),(0,a.kt)("h2",{id:"id"},"ID"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ID")," scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as ",(0,a.kt)("inlineCode",{parentName:"p"},'"4"'),") or integer (such as ",(0,a.kt)("inlineCode",{parentName:"p"},"4"),") input value will be accepted as an ID."),(0,a.kt)("h2",{id:"int"},"Int"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Int")," scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."),(0,a.kt)("h2",{id:"precisedatetime"},"PreciseDateTime"),(0,a.kt)("p",null,"An ISO-8601 encoded UTC date string with millisecond precision."),(0,a.kt)("h2",{id:"string"},"String"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."),(0,a.kt)("h2",{id:"uri"},"URI"),(0,a.kt)("p",null,"An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."),(0,a.kt)("h2",{id:"x509certificate"},"X509Certificate"),(0,a.kt)("p",null,"A valid x509 certificate string"))}u.isMDXComponent=!0}}]);